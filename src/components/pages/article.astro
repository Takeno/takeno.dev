---
import { getEntry, type CollectionEntry } from 'astro:content';
import FormattedDate from '../FormattedDate.astro';
import Layout from '../../layouts/Layout.astro';
import TranslationInfo from '../TranslationInfo.astro';
import { extractSlugFromPath } from '../../utils/contents';

interface Props {
  post: CollectionEntry<'blog'>;
}

const { post } = Astro.props;
let { Content } = await post.render();

const alternateLang = await getEntry('blog', post.data.translationOf);

if (alternateLang === undefined) {
  throw new Error('Translation not found');
}

const alternateUrls = {
  [post.data.lang]: `/${post.data.lang}/blog/${extractSlugFromPath(post.slug)}/`,
};

if (alternateLang.data.untranslated === false) {
  alternateUrls[alternateLang.data.lang] =
    alternateLang.data.lang === 'it'
      ? `/blog/${extractSlugFromPath(alternateLang.slug)}/`
      : `/${alternateLang.data.lang}/blog/${extractSlugFromPath(alternateLang.slug)}/`;
}

if (post.data.untranslated) {
  Content = (await alternateLang.render()).Content;
}
---

<Layout title={post.data.title} alternateUrls={alternateUrls}>
  <article class="max-w-3xl mx-auto px-4">
    <header class="mb-8">
      <div class="text-gray-400 mb-4">
        <FormattedDate date={post.data.pubDate} />
      </div>

      <h1 class="text-4xl md:text-5xl font-bold text-white mb-6">
        {post.data.title}
      </h1>

      <p class="text-2xl text-gray-300">
        {post.data.description}
      </p>

      <TranslationInfo
        untranslated={post.data.untranslated}
        originalLang={post.data.lang}
        translationUrl={alternateUrls[alternateLang.data.lang]}
      />
    </header>

    <div class="prose prose-invert prose-lg">
      <Content />
    </div>
  </article>
</Layout>
